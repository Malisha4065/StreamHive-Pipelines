trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - Frontend/*
    - UploadService/*
    - TranscoderService/*
    - VideoCatalogService/*
    - PlaybackService/*

variables:
  # Docker Hub Configuration
  dockerRegistryServiceConnection: 'dockerhubconn'
  containerRegistry: 'docker.io'
  imageRepository: 'malisha'
  buildConfiguration: 'Release'
  k8sNamespace: 'streamhive'
  keyvaultName: '${KEYVAULT_NAME}'
  tenantId: '${TENANT_ID}'

resources:
  repositories:
  - repository: frontend
    type: github
    name: Malisha4065/StreamHive-Frontend
    ref: main
    endpoint: Malisha4065
  - repository: upload
    type: github
    name: Malisha4065/StreamHive-UploadService
    ref: main
    endpoint: Malisha4065
  - repository: transcoder
    type: github
    name: Malisha4065/StreamHive-TranscoderService
    ref: main
    endpoint: Malisha4065
  - repository: videocatalog
    type: github
    name: Malisha4065/StreamHive-VideoCatalogService
    ref: main
    endpoint: Malisha4065
  - repository: playback
    type: github
    name: Malisha4065/StreamHive-PlaybackService
    ref: main
    endpoint: Malisha4065

stages:
- stage: DeployToKubernetes
  displayName: 'Deploy to Kubernetes'
  jobs:
  - job: DeployStreamHive
    displayName: 'Deploy StreamHive to K8s'
    pool:
      name: 'Default'
    variables:
      KUBECONFIG: /home/azureuser/myagent/azdo-kubeconfig
    steps:         
          - script: |
              echo "Creating namespace if it doesn't exist..."
              kubectl create namespace $(k8sNamespace) --dry-run=client -o yaml | kubectl apply -f -
            displayName: 'Create Namespace'
            
          - script: |
              cat <<EOF | kubectl apply -f -
              apiVersion: secrets-store.csi.x-k8s.io/v1
              kind: SecretProviderClass
              metadata:
                name: azure-streamhive-secrets
                namespace: streamhive
              spec:
                provider: azure
                parameters:
                  usePodIdentity: "false"
                  useVMManagedIdentity: "true"
                  userAssignedIdentityID: ""
                  keyvaultName: $(keyvaultName)
                  tenantId: $(tenantId)
                  objects: |
                    array:
                      - |
                        objectName: "azure-storage-account"
                        objectType: secret
                        objectVersion: ""
                      - |
                        objectName: "azure-storage-connection-string"  
                        objectType: secret
                        objectVersion: ""
                      - |
                        objectName: "azure-storage-key"
                        objectType: secret
                        objectVersion: ""
                      - |
                        objectName: "azure-storage-raw-container"
                        objectType: secret
                        objectVersion: ""
                      - |
                        objectName: "azure-storage-processed-container"
                        objectType: secret
                        objectVersion: ""
              ---
              # Secret for sensitive data
              apiVersion: v1
              kind: Secret
              metadata:
                name: streamhive-secrets
                namespace: streamhive
              type: Opaque
              stringData:
                DB_PASSWORD: "streamhive_dev_password"
                JWT_SECRET: "your-super-secret-jwt-key-for-development-only"
                REDIS_PASSWORD: ""
                RABBITMQ_PASSWORD: "guest"
              EOF
            displayName: 'Apply secrets'

          - script: |
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: postgres-init-scripts
                namespace: streamhive
              data:
                init-db.sh: |
                  #!/bin/bash
                  set -e
                  psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
                      SELECT 'CREATE DATABASE streamhive_security'
                      WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'streamhive_security')\gexec
                      GRANT ALL PRIVILEGES ON DATABASE streamhive_security TO "$POSTGRES_USER";
                  EOSQL
              EOF
            displayName: 'Create PostgreSQL Init Scripts ConfigMap'

          - script: |
              cat <<EOF | kubectl apply -f -
              # PostgreSQL Database for StreamHive
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: postgres
                namespace: streamhive
                labels:
                  app: postgres
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: postgres
                template:
                  metadata:
                    labels:
                      app: postgres
                  spec:
                    containers:
                    - name: postgres
                      image: postgres:15-alpine
                      ports:
                      - containerPort: 5432
                        name: postgres
                      env:
                      - name: POSTGRES_DB
                        value: "video_catalog"
                      - name: POSTGRES_USER
                        value: "postgres"
                      - name: POSTGRES_PASSWORD
                        value: "streamhive_dev_password"
                      - name: PGDATA
                        value: "/var/lib/postgresql/data/pgdata"
                      volumeMounts:
                      - name: postgres-storage
                        mountPath: /var/lib/postgresql/data
                      - name: postgres-init-scripts
                        mountPath: /docker-entrypoint-initdb.d
                      livenessProbe:
                        exec:
                          command:
                          - pg_isready
                          - -U
                          - postgres
                        initialDelaySeconds: 30
                        periodSeconds: 10
                      readinessProbe:
                        exec:
                          command:
                          - pg_isready
                          - -U
                          - postgres
                        initialDelaySeconds: 5
                        periodSeconds: 5
                    volumes:
                    - name: postgres-storage
                      emptyDir: {}
                    - name: postgres-init-scripts
                      configMap:
                        name: postgres-init-scripts
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: postgres
                namespace: streamhive
                labels:
                  app: postgres
              spec:
                selector:
                  app: postgres
                ports:
                - port: 5432
                  targetPort: 5432
                  name: postgres
                type: ClusterIP

              ---
              # Redis for caching and session management
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: redis
                namespace: streamhive
                labels:
                  app: redis
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: redis
                template:
                  metadata:
                    labels:
                      app: redis
                  spec:
                    containers:
                    - name: redis
                      image: redis:7-alpine
                      ports:
                      - containerPort: 6379
                        name: redis
                      command:
                      - redis-server
                      - --appendonly
                      - "yes"
                      volumeMounts:
                      - name: redis-storage
                        mountPath: /data
                      livenessProbe:
                        exec:
                          command:
                          - redis-cli
                          - ping
                        initialDelaySeconds: 30
                        periodSeconds: 10
                      readinessProbe:
                        exec:
                          command:
                          - redis-cli
                          - ping
                        initialDelaySeconds: 5
                        periodSeconds: 5
                    volumes:
                    - name: redis-storage
                      emptyDir: {}

              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: redis
                namespace: streamhive
                labels:
                  app: redis
              spec:
                selector:
                  app: redis
                ports:
                - port: 6379
                  targetPort: 6379
                  name: redis
                type: ClusterIP
              EOF
            displayName: 'DB and Redis Application'

          - script: |
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: rabbitmq
                namespace: streamhive
                labels:
                  app: rabbitmq
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: rabbitmq
                template:
                  metadata:
                    labels:
                      app: rabbitmq
                  spec:
                    containers:
                    - name: rabbitmq
                      image: rabbitmq:4.0-management
                      ports:
                      - containerPort: 5672
                        name: amqp
                      - containerPort: 15672
                        name: management
                      env:
                      - name: RABBITMQ_DEFAULT_USER
                        value: "guest"
                      - name: RABBITMQ_DEFAULT_PASS
                        value: "guest"
                      volumeMounts:
                      - name: rabbitmq-storage
                        mountPath: /var/lib/rabbitmq
                      livenessProbe:
                        exec:
                          command:
                          - rabbitmq-diagnostics
                          - -q
                          - ping
                        initialDelaySeconds: 60
                        periodSeconds: 10
                        timeoutSeconds: 10
                        failureThreshold: 3
                      readinessProbe:
                        exec:
                          command:
                          - rabbitmq-diagnostics
                          - -q
                          - check_port_connectivity
                        initialDelaySeconds: 20
                        periodSeconds: 10
                        timeoutSeconds: 10
                        failureThreshold: 3
                    volumes:
                    - name: rabbitmq-storage
                      emptyDir: {}

              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: rabbitmq
                namespace: streamhive
                labels:
                  app: rabbitmq
              spec:
                selector:
                  app: rabbitmq
                ports:
                - port: 5672
                  targetPort: 5672
                  name: amqp
                - port: 15672
                  targetPort: 15672
                  name: management
                type: ClusterIP
              EOF
            displayName: 'RabbitMQ application'

          - script: |
              # Create namespace if it doesn't exist
              kubectl create namespace $(k8sNamespace) --dry-run=client -o yaml | kubectl apply -f -
              
              # Deploy Security Service
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: streamhive-security-service
                namespace: $(k8sNamespace)
              spec:
                replicas: 2 # Start with 2 for availability
                selector:
                  matchLabels:
                    app: streamhive-security-service
                template:
                  metadata:
                    labels:
                      app: streamhive-security-service
                  spec:
                    containers:
                    - name: security-service
                      image: $(imageRepository)/streamhive-security-service:latest
                      ports:
                      - containerPort: 8080
                      env:
                      - name: SERVER_PORT
                        value: "8080"
                      - name: DB_HOST
                        value: "postgres"
                      - name: DB_PORT
                        value: "5432"
                      - name: DB_NAME
                        value: "streamhive_security"
                      - name: DB_USER
                        value: "postgres"
                      - name: DB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: streamhive-secrets
                            key: DB_PASSWORD
                      - name: JWT_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: streamhive-secrets
                            key: JWT_SECRET
                      resources:
                        requests:
                          memory: "256Mi"
                          cpu: "200m"
                        limits:
                          memory: "512Mi"
                          cpu: "500m"
                      livenessProbe:
                        httpGet:
                          path: /health
                          port: 8080
                        initialDelaySeconds: 15
                        periodSeconds: 20
                      readinessProbe:
                        httpGet:
                          path: /health
                          port: 8080
                        initialDelaySeconds: 5
                        periodSeconds: 10
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: streamhive-security-service
                namespace: $(k8sNamespace)
              spec:
                selector:
                  app: streamhive-security-service
                ports:
                - port: 8080
                  targetPort: 8080
                type: ClusterIP
              EOF

              # Deploy Upload Service
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: streamhive-upload-service
                namespace: $(k8sNamespace)
              spec:
                replicas: 2
                selector:
                  matchLabels:
                    app: streamhive-upload-service
                template:
                  metadata:
                    labels:
                      app: streamhive-upload-service
                  spec:
                    securityContext:
                      fsGroup: 1001
                    containers:
                    - name: upload-service
                      image: $(imageRepository)/streamhive-upload-service:latest
                      ports:
                      - containerPort: 3001
                      command: ["/bin/sh"]
                      args:
                        - -c
                        - |
                          set -e
                          echo "Waiting for secrets to be mounted by CSI driver..."
                          
                          i=1
                          while [ \$i -le 30 ]; do
                            if [ -f "/mnt/secrets-store/azure-storage-connection-string" ]; then
                              echo "✅ Secrets found, proceeding to start application."
                              exec npm start
                            fi
                            echo "Waiting for secrets... (Attempt \$i/30)"
                            sleep 5
                            i=\$((\$i + 1))
                          done                         
                                        
                          echo "❌ ERROR: Timed out waiting for secret file /mnt/secrets-store/azure-storage-connection-string."
                          exit 1
                      volumeMounts:
                      - name: secrets-store
                        mountPath: "/mnt/secrets-store"
                        readOnly: true
                      env:
                      - name: PORT
                        value: "3001"
                      - name: NODE_ENV
                        value: "production"
                      - name: SECURITY_SERVICE_URL
                        value: "http://streamhive-security-service:8080/api/auth/validate"
                      - name: JWT_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: streamhive-secrets
                            key: JWT_SECRET
                      - name: RABBITMQ_URL
                        value: "amqp://guest:guest@rabbitmq:5672/"
                      - name: AMQP_EXCHANGE
                        value: "streamhive"
                      - name: AMQP_UPLOAD_ROUTING_KEY
                        value: "video.uploaded"
                      - name: MAX_FILE_SIZE
                        value: "1073741824"
                      - name: ALLOWED_FORMATS
                        value: "mp4,mov,avi,webm"
                      resources:
                        requests:
                          memory: "128Mi"
                          cpu: "100m"
                        limits:
                          memory: "256Mi"
                          cpu: "250m"
                    volumes:
                    - name: secrets-store
                      csi:
                        driver: secrets-store.csi.k8s.io
                        readOnly: true
                        volumeAttributes:
                          secretProviderClass: "azure-streamhive-secrets"
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: streamhive-upload-service
                namespace: $(k8sNamespace)
              spec:
                selector:
                  app: streamhive-upload-service
                ports:
                - port: 3001
                  targetPort: 3001
                type: ClusterIP
              EOF
              
              # Deploy Transcoder Service
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: streamhive-transcoder-service
                namespace: $(k8sNamespace)
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: streamhive-transcoder-service
                template:
                  metadata:
                    labels:
                      app: streamhive-transcoder-service
                  spec:
                    containers:
                    - name: transcoder-service
                      image: $(imageRepository)/streamhive-transcoder-service:latest
                      volumeMounts:
                      - name: secrets-store
                        mountPath: "/mnt/secrets-store"
                        readOnly: true
                      env:
                      - name: AMQP_URL
                        value: "amqp://guest:guest@rabbitmq:5672/"
                      - name: AMQP_EXCHANGE
                        value: "streamhive"
                      - name: AMQP_UPLOAD_ROUTING_KEY
                        value: "video.uploaded"
                      - name: AMQP_TRANSCODED_ROUTING_KEY
                        value: "video.transcoded"
                      - name: AMQP_QUEUE
                        value: "transcoder.video.uploaded"
                      - name: CONCURRENCY
                        value: "1"
                      - name: LOG_LEVEL
                        value: "info"
                      resources:
                        requests:
                          memory: "256Mi"
                          cpu: "250m"
                        limits:
                          memory: "1Gi"
                          cpu: "1000m"
                    volumes:
                    - name: secrets-store
                      csi:
                        driver: secrets-store.csi.k8s.io
                        readOnly: true
                        volumeAttributes:
                          secretProviderClass: "azure-streamhive-secrets"
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: streamhive-transcoder-service
                namespace: $(k8sNamespace)
              spec:
                selector:
                  app: streamhive-transcoder-service
              EOF
              
              # Deploy Video Catalog Service
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: streamhive-video-catalog-service
                namespace: $(k8sNamespace)
              spec:
                replicas: 2
                selector:
                  matchLabels:
                    app: streamhive-video-catalog-service
                template:
                  metadata:
                    labels:
                      app: streamhive-video-catalog-service
                  spec:
                    containers:
                    - name: video-catalog-service
                      image: $(imageRepository)/streamhive-video-catalog-service:latest
                      ports:
                      - containerPort: 8080
                      volumeMounts:
                      - name: secrets-store
                        mountPath: "/mnt/secrets-store"
                        readOnly: true
                      env:
                      - name: DB_HOST
                        value: "postgres"
                      - name: DB_PORT
                        value: "5432"
                      - name: DB_USER
                        value: "postgres"
                      - name: DB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: streamhive-secrets
                            key: DB_PASSWORD
                      - name: DB_NAME
                        value: "video_catalog"
                      - name: DB_SSLMODE
                        value: "disable"
                      - name: AMQP_URL
                        value: "amqp://guest:guest@rabbitmq:5672/"
                      - name: AMQP_EXCHANGE
                        value: "streamhive"
                      - name: AMQP_QUEUE
                        value: "video-catalog.video.transcoded"
                      - name: AMQP_ROUTING_KEY
                        value: "video.transcoded"
                      - name: AMQP_UPLOAD_QUEUE
                        value: "video-catalog.video.uploaded"
                      - name: AMQP_UPLOAD_ROUTING_KEY
                        value: "video.uploaded"
                      - name: PORT
                        value: "8080"
                      resources:
                        requests:
                          memory: "128Mi"
                          cpu: "100m"
                        limits:
                          memory: "256Mi"
                          cpu: "250m"
                    volumes:
                    - name: secrets-store
                      csi:
                        driver: secrets-store.csi.k8s.io
                        readOnly: true
                        volumeAttributes:
                          secretProviderClass: "azure-streamhive-secrets"
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: streamhive-video-catalog-service
                namespace: $(k8sNamespace)
              spec:
                selector:
                  app: streamhive-video-catalog-service
                ports:
                - port: 8080
                  targetPort: 8080
                type: ClusterIP
              EOF
              
              # Deploy Playback Service
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: streamhive-playback-service
                namespace: $(k8sNamespace)
              spec:
                replicas: 2
                selector:
                  matchLabels:
                    app: streamhive-playback-service
                template:
                  metadata:
                    labels:
                      app: streamhive-playback-service
                  spec:
                    containers:
                    - name: playback-service
                      image: $(imageRepository)/streamhive-playback-service:latest
                      ports:
                      - containerPort: 8090
                      volumeMounts:
                      - name: secrets-store
                        mountPath: "/mnt/secrets-store"
                        readOnly: true
                      env:
                      - name: DB_HOST
                        value: "postgres"
                      - name: DB_PORT
                        value: "5432"
                      - name: DB_USER
                        value: "postgres"
                      - name: DB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: streamhive-secrets
                            key: DB_PASSWORD
                      - name: DB_NAME
                        value: "video_catalog"
                      - name: DB_SSLMODE
                        value: "disable"
                      - name: PORT
                        value: "8090"
                      - name: REDIS_HOST
                        value: "redis"
                      - name: REDIS_PORT
                        value: "6379"
                      - name: REDIS_PASSWORD
                        value: ""
                      - name: CACHE_TTL
                        value: "3600"
                      resources:
                        requests:
                          memory: "128Mi"
                          cpu: "100m"
                        limits:
                          memory: "256Mi"
                          cpu: "250m"
                    volumes:
                    - name: secrets-store
                      csi:
                        driver: secrets-store.csi.k8s.io
                        readOnly: true
                        volumeAttributes:
                          secretProviderClass: "azure-streamhive-secrets"
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: streamhive-playback-service
                namespace: $(k8sNamespace)
              spec:
                selector:
                  app: streamhive-playback-service
                ports:
                - port: 8090
                  targetPort: 8090
                type: ClusterIP
              EOF
              
              cat <<EOF | kubectl apply -f -
              # 1. ISTIO GATEWAY
              apiVersion: networking.istio.io/v1alpha3
              kind: Gateway
              metadata:
                name: streamhive-gateway
                namespace: streamhive
              spec:
                selector:
                  istio: ingressgateway # use istio default ingress gateway
                servers:
                - port:
                    number: 80
                    name: http
                    protocol: HTTP
                  hosts:
                  - "*"
              ---
              # 2. ISTIO VIRTUALSERVICE (Traffic Rules)
              apiVersion: networking.istio.io/v1alpha3
              kind: VirtualService
              metadata:
                name: streamhive-virtualservice
                namespace: streamhive
              spec:
                hosts:
                - "*"
                gateways:
                - streamhive-gateway
                http:
                # Direct route: allow calling /api/v1/upload directly
                - match:
                  - uri:
                      prefix: /api/v1/upload
                  headers:
                    response:
                      add:
                        x-upload-route: direct-v1
                  route:
                  - destination:
                      host: streamhive-upload-service
                      port:
                        number: 3001
                # Hotfix: normalize accidental /api/upload/api/v1 -> /api/v1/upload (server-side rewrite)
                - match:
                  - uri:
                      exact: /api/upload/api/v1
                  rewrite:
                    uri: "/api/v1/upload"
                  headers:
                    response:
                      add:
                        x-upload-route: hotfix-exact
                  route:
                  - destination:
                      host: streamhive-upload-service
                      port:
                        number: 3001
                - match:
                  - uri:
                      prefix: /api/upload/api/v1/
                  rewrite:
                    uri: "/api/v1/upload/"
                  headers:
                    response:
                      add:
                        x-upload-route: hotfix-prefix
                  route:
                  - destination:
                      host: streamhive-upload-service
                      port:
                        number: 3001
                # Rule for Upload Service (exact)
                - match:
                  - uri:
                      exact: /api/upload
                  rewrite:
                    uri: "/api/v1/upload"
                  headers:
                    response:
                      add:
                        x-upload-route: upload-exact
                  route:
                  - destination:
                      host: streamhive-upload-service
                      port:
                        number: 3001
                # Rule for Upload Service (prefix with trailing slash)
                - match:
                  - uri:
                      regex: '^/api/upload/?$'
                  rewrite:
                    uri: "/api/v1/upload/"
                  headers:
                    response:
                      add:
                        x-upload-route: upload-prefix
                  route:
                  - destination:
                      host: streamhive-upload-service
                      port:
                        number: 3001
                # Rule for Video Catalog Service
                - match:
                  - uri:
                      prefix: /api/catalog/
                  rewrite:
                    uri: "/api/v1/"
                  route:
                  - destination:
                      host: streamhive-video-catalog-service
                      port:
                        number: 8080
                # Rule for Playback Service - handle double path issue
                - match:
                  - uri:
                      prefix: /api/playback/playback/
                  rewrite:
                    uri: "/playback/"
                  route:
                  - destination:
                      host: streamhive-playback-service
                      port:
                        number: 8090
                # Rule for Playback Service - normal case
                - match:
                  - uri:
                      prefix: /api/playback/
                  rewrite:
                    uri: "/playback/"
                  route:
                  - destination:
                      host: streamhive-playback-service
                      port:
                        number: 8090
                # Rule for Security Service
                - match:
                  - uri:
                      prefix: /api/auth/
                  route:
                  - destination:
                      host: streamhive-security-service
                      port:
                        number: 8080
                # Rule for the Frontend (catches everything else)
                - route:
                  - destination:
                      host: streamhive-frontend
                      port:
                        number: 80
              EOF

              # Deploy Frontend
              cat <<EOF | kubectl apply -f -
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: streamhive-frontend
                namespace: $(k8sNamespace)
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: streamhive-frontend
                template:
                  metadata:
                    labels:
                      app: streamhive-frontend
                  spec:
                    containers:
                    - name: frontend
                      image: $(imageRepository)/streamhive-frontend:latest
                      ports:
                      - containerPort: 80
                      env:
                      - name: VITE_API_UPLOAD
                        value: "/api/upload"
                      - name: VITE_API_CATALOG
                        value: "/api/catalog"
                      - name: VITE_API_PLAYBACK
                        value: "/api/playback"
                      - name: VITE_JWT
                        value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwidXNlcm5hbWUiOiJkZW1vIiwicGVybWlzc2lvbnMiOlsidXBsb2FkIiwidmlldyIsImNhdGFsb2ciXSwiaWF0IjoxNzU1NDU1MDYyLCJleHAiOjE3NTU1NDE0NjJ9.9RDfiaYzvevwRHMtwhsYUMapdJZDbiZADJ1oA5UNqEc"
                      - name: VITE_API_LOGIN
                        value: "/api/auth/login" 
                      resources:
                        requests:
                          memory: "128Mi"
                          cpu: "50m"
                        limits:
                          memory: "256Mi"
                          cpu: "100m"
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: streamhive-frontend
                namespace: $(k8sNamespace)
              spec:
                selector:
                  app: streamhive-frontend
                ports:
                - port: 80
                  targetPort: 80
                type: ClusterIP
              EOF
            displayName: 'Deploy All Services'